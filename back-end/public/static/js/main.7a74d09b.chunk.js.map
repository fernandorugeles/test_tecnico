{"version":3,"sources":["helpers/Utils.js","services/Url.js","views/orders/OrderSelected.js","services/Pay.services.js","views/product/ListProduct.js","services/Products.services.js","views/datauser/DataUser.js","views/orders/OrderResponse.js","services/Orders.services.js","views/orders/OrderList.js","models/Order.js","routes/RouterComponent.js","App.js","reportWebVitals.js","index.js"],"names":["formData","data","FormData","_","isEmpty","items","append","upLocalStorage","name","localStorage","setItem","JSON","stringify","getLocalStorage","parse","getItem","removeLocalStorage","removeItem","urlApi","process","url","url_products_list","url_pay","url_get_status","url_get_orders_list","observer","history","useHistory","product","order","useState","isLoading","setIsLoading","urlPago","setUrlPago","setIdSesion","reference","setReference","payOrder","fromFetch","method","body","pipe","switchMap","response","ok","json","alert","statusText","of","error","message","status","catchError","err","payOrder$","subscribe","next","result","processUrl","requestId","complete","orientation","onClick","push","type","icon","AppstoreAddOutlined","span","hoverable","cover","alt","src","image","Meta","title","description","offset","customer_name","customer_email","customer_mobile","price","style","textAlign","href","loading","CheckOutlined","flex","display","alignContent","alignItems","flexDirection","ApiOutlined","fontSize","window","location","replace","listProducts","setListProducts","isModalVisible","setIsModalVisible","isModalVisibleOrderResponse","setIsModalVisibleOrderResponse","useEffect","clear","fecthList","IconText","text","React","createElement","openCloseModal","item","openCloseModalOrderResponse","FormOrder","onCancel","okButtonProps","visible","afterClose","cancelText","FormOrderResponse","onFinish","Item","label","labelCol","rules","required","onChange","e","set","target","value","htmlType","width","actions","SendOutlined","DollarCircleOutlined","BorderlessTableOutlined","BuildOutlined","grid","column","bordered","dataSource","renderItem","justify","align","className","useParams","setResponse","getStatusOrder","getOrderStatus$","LoadingOutlined","customer_status","process_url","orderList","setOrderList","getListOrders","console","log","itemLayout","size","xs","sm","pagination","page","pageSize","extra","id","Order","types","model","optional","string","id_product","integer","self","property","views","RouterComponent","create","path","render","props","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"kSAKO,SAASA,EAASA,GACxB,IAAIC,EAAO,IAAIC,SACf,IAAIC,IAAEC,QAAQJ,GACb,IAAI,IAAIK,KAASL,EAChBC,EAAKK,OAAOD,EAAOL,EAASK,IAG9B,OAAOJ,EAID,SAASM,EAAeC,EAAMP,GAEpCQ,aAAaC,QAAQF,EAAMG,KAAKC,UAAUX,IAIpC,SAASY,EAAgBL,GAC/B,OAAOG,KAAKG,MAAML,aAAaM,QAAQP,IAIjC,SAASQ,EAAmBR,GAClC,OAAOC,aAAaQ,WAAWT,G,iDC5B1BU,EAASC,4BACFC,EAAM,CACfC,kBAAkB,GAAD,OAAKH,EAAL,yBACjBI,QAAQ,GAAD,OAAKJ,EAAL,cACPK,eAAe,GAAD,OAAKL,EAAL,0BACdM,oBAAoB,GAAD,OAAKN,EAAL,yB,kBC0FRO,mBAtFf,WACI,IAAIC,EAAUC,cAGRC,EAAUf,EAAgB,WAC1BgB,EAAQhB,EAAgB,SALT,EAQaiB,oBAAS,GARtB,mBAQdC,EARc,KAQHC,EARG,OASSF,mBAAS,MATlB,mBASdG,EATc,KASLC,EATK,OAUWJ,mBAAS,MAVpB,mBAUJK,GAVI,aAWaL,mBAAS,MAXtB,mBAWdM,EAXc,KAWHC,EAXG,KAmBfC,EAAW,WACbN,GAAa,GCtBI,SAACH,EAAOD,GAAR,OAAoBW,YAAU,GAAD,OAAInB,EAAIE,SAAW,CACxEkB,OAAQ,OACRC,KAAMzC,EAAS,CACd6B,MAAOlB,KAAKC,UAAUiB,GACtBD,QAASjB,KAAKC,UAAUgB,OAEvBc,KACFC,aAAU,SAAAC,GAET,OAAIA,EAASC,GAELD,EAASE,QAGhBC,MAAM,GAAD,OAAIH,EAASI,aACXC,YAAG,CAAEC,OAAO,EAAMC,QAAQ,SAAD,OAAWP,EAASQ,cAGtDC,aAAW,SAAAC,GAIV,OADAP,MAAM,GAAD,OAAIO,EAAIH,UACNF,YAAG,CAAEC,OAAO,EAAMC,QAASG,EAAIH,cDChCI,CAAU1B,EAAOD,GAAS4B,UAAU,CAChCC,KAAM,SAAAC,GACGA,EAAOR,QACRhB,EAAWwB,EAAOC,YAClBxB,EAAYuB,EAAOE,WACnBvB,EAAaqB,EAAOtB,aAG5ByB,SAAU,WACN7B,GAAa,OAMzB,OAAKJ,GAAYC,EAUb,qCACI,eAAC,IAAD,CAASiC,YAAY,OAArB,UACI,cAAC,IAAD,CAAQC,QAAS,WAjCzBrC,EAAQsC,KAAR,kBAiC2CC,KAAK,SAASC,KAAM,cAACC,EAAA,EAAD,IAAvD,gCADJ,yBAMA,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,KAAM,EAAX,SACI,cAAC,IAAD,CACIC,WAAS,EACTC,MAAO,qBAAKC,IAAK3C,EAAQpB,KAAMgE,IAAK5C,EAAQ6C,QAFhD,SAII,cAAC,IAAKC,KAAN,CAAWC,MAAO/C,EAAQpB,KAAMoE,YAAahD,EAAQgD,kBAG7D,eAAC,IAAD,CAAKC,OAAQ,EAAGT,KAAM,GAAtB,UACI,6BAAKvC,EAAMiD,gBACX,6BAAKjD,EAAMkD,iBACX,6BAAKlD,EAAMmD,kBACX,mCAAMpD,EAAQqD,SAEThD,EAMD,sBAAKiD,MAAO,CAACC,UAAU,UAAvB,UACI,uBACA,eAAC,IAAD,CAASrB,YAAY,SAArB,gCAAkD1B,KAClD,6BAAI,mBAAGgD,KAAMnD,EAAT,8CAPR,cAAC,IAAD,CAAQoD,QAAStD,EAAWgC,QAAS,kBAAMzB,KAAY2B,KAAK,UAAUC,KAAM,cAACoB,EAAA,EAAD,IAA5E,4CAhCZ,sBAAKJ,MAAO,CAAEK,KAAM,EAAGC,QAAS,OAAQC,aAAc,SAAUC,WAAY,SAAUC,cAAe,UAArG,UACI,cAACC,EAAA,EAAD,CAAaV,MAAO,CAAEW,SAAU,OAChC,mFACA,mBAAG9B,QAAS,kBAAM+B,OAAOC,SAASC,QAAQ,MAA1C,0B,iFEsHDvE,mBA/Jf,YAAiC,IAAVI,EAAS,EAATA,MACfH,EAAUC,cADc,EAIYG,mBAAS,IAJrB,mBAIrBmE,EAJqB,KAIPC,EAJO,OAKMpE,oBAAS,GALf,mBAKrBC,EALqB,KAKVC,EALU,OAMgBF,oBAAS,GANzB,mBAMrBqE,EANqB,KAMLC,EANK,OAO0CtE,oBAAS,GAPnD,mBAOrBuE,EAPqB,KAOQC,EAPR,KAU5BC,qBAAU,WJcN9F,aAAa+F,UIZd,IAGH,IAKMC,EAAY,WACdzE,GAAa,GCtBaO,YAAU,GAAD,OAAInB,EAAIC,mBAAqB,CACvEmB,OAAQ,OACRC,KAAMzC,EAAS,MACb0C,KACFC,aAAU,SAAAC,GACT,OAAIA,EAASC,GAELD,EAASE,QAGhBC,MAAM,GAAD,OAAIH,EAASI,aACXC,YAAG,CAAEC,OAAO,EAAMC,QAAQ,SAAD,OAAWP,EAASQ,cAGtDC,aAAW,SAAAC,GAGV,OADAP,MAAM,GAAD,OAAIO,EAAIH,UACNF,YAAG,CAAEC,OAAO,EAAMC,QAASG,EAAIH,cDMjBK,UAAU,CACrBC,KAAM,SAAAC,GACGA,EAAOR,OACRgD,EAAgBxC,IAGxBG,SAAU,WACN7B,GAAa,OAMnB0E,EAAW,SAAC,GAAD,IAAGxC,EAAH,EAAGA,KAAMyC,EAAT,EAASA,KAAM5C,EAAf,EAAeA,QAAf,OACb,eAAC,IAAD,CAAOA,QAASA,EAAhB,UACK6C,IAAMC,cAAc3C,GACpByC,MAKHG,EAAiB,SAACC,GACpBX,GAAmBD,GACfY,GACAxG,EAAe,UAAWwG,IAK5BC,EAA8B,SAACD,GACjCT,GAAgCD,IAS9BY,EAAY,kBACd,mCACI,cAAC,IAAD,CACIC,SAAU,kBAAMJ,KAChBK,cAAe,CAAEjC,MAAO,CAAEM,QAAS,SACnCb,MAAM,+CACNyC,QAASjB,EACTkB,WAAY,kBAAMrG,EAAmB,YACrCsG,WAAY,WANhB,SAOI,cAAC,EAAD,CAAUzF,MAAOA,SAMvB0F,EAAoB,kBACtB,mCACI,cAAC,IAAD,CACIL,SAAU,kBAAMF,KAChBG,cAAe,CAAEjC,MAAO,CAAEM,QAAS,SACnCb,MAAM,+CACNyC,QAASf,EACTgB,WAAY,kBAAMrG,EAAmB,YACrCsG,WAAY,WANhB,SAQI,8BACI,eAAC,IAAD,CACIE,SAAU,WAxE1B9F,EAAQsC,KAAR,yBAA+BnC,EAAMO,aAuEzB,UAEI,cAAC,IAAKqF,KAAN,CACIC,MAAM,aACNlH,KAAK,YACLmH,SAAU,CAAEvD,KAAM,IAClBwD,MAAO,CAAC,CAAEC,UAAU,EAAM1E,QAAS,+BAJvC,SAKI,cAAC,IAAD,CAAO2E,SAAU,SAACC,GAAD,OAAOlG,EAAMmG,IAAI,YAAaD,EAAEE,OAAOC,YAE5D,cAAC,IAAKT,KAAN,UACI,cAAC,IAAD,CAAQxD,KAAK,UAAUkE,SAAS,SAAhC,mCAWlBV,EAAO,SAACV,GAAD,OACT,cAAC,IAAKU,KAAN,UACI,cAAC,IAAD,CACIvC,MAAO,CAAEkD,MAAO,KAChB9D,MACI,qBACIE,IAAKuC,EAAKtC,QAGlB4D,QAAS,CACL,cAAC3B,EAAD,CAAU3C,QAAS,kBAAM+C,EAAeC,IAAO7C,KAAMoE,IAAc3B,KAAK,WAAc,wBACtF,cAACD,EAAD,CAAUxC,KAAMqE,IAAsB5B,KAAMI,EAAK9B,OAAW,yBATpE,SAYI,cAAC,IAAKP,KAAN,CACIC,MAAOoC,EAAKvG,KACZoE,YAAamC,EAAKnC,mBAOlC,OACI,qCACI,cAACqC,EAAD,IACA,cAACM,EAAD,IACA,eAAC,IAAD,CAASzD,YAAY,OAArB,UACI,cAAC,IAAD,CAAQuB,QAAStD,EAAWgC,QAAS,kBAAM0C,KAAaxC,KAAK,SAASC,KAAM,cAACC,EAAA,EAAD,IAA5E,2BAGA,cAAC,IAAD,CAAQJ,QAAS,WAlFzBrC,EAAQsC,KAAK,gBAkFyCC,KAAK,SAASC,KAAM,cAACsE,EAAA,EAAD,IAAlE,yBAGA,cAAC,IAAD,CAAQzE,QAAS,kBAAMiD,KAA+B/C,KAAK,SAASC,KAAM,cAACuE,EAAA,EAAD,IAA1E,gCAIJ,cAAC,IAAD,CACIpD,QAAStD,EACT2G,KAAM,CAAEC,OAAQ,GAChBC,UAAQ,EACRC,WAAY5C,EACZ6C,WAAY,SAAA/B,GAAI,OACZ,cAACU,EAAD,eAAUV,aE/GftF,mBA5Cf,YAA4B,IAATI,EAAQ,EAARA,MACXH,EAAUC,cAMd,OACI,cAAC,IAAD,CAAKoH,QAAQ,SAASC,MAAM,SAA5B,SACI,cAAC,IAAD,CAAKC,UAAU,aAAf,SACI,eAAC,IAAD,CACIzB,SAAU,kBARtBjH,EAAe,QAASsB,QACxBH,EAAQsC,KAAK,mBAML,UAEI,cAAC,IAAKyD,KAAN,CACIC,MAAM,SACNC,SAAU,CAACvD,KAAK,IAChB5D,KAAK,OACLoH,MAAO,CAAC,CAAEC,UAAU,EAAM1E,QAAS,2BAJvC,SAKI,cAAC,IAAD,CAAO2E,SAAU,SAACC,GAAD,OAAOlG,EAAMmG,IAAI,gBAAiBD,EAAEE,OAAOC,YAEhE,cAAC,IAAKT,KAAN,CACIC,MAAM,wBACNC,SAAU,CAACvD,KAAK,IAChB5D,KAAK,QACLoH,MAAO,CAAC,CAAEC,UAAU,EAAM1E,QAAS,yCAJvC,SAKI,cAAC,IAAD,CAAO2E,SAAU,SAACC,GAAD,OAAOlG,EAAMmG,IAAI,iBAAkBD,EAAEE,OAAOC,YAEjE,cAAC,IAAKT,KAAN,CACIC,MAAM,uBACNC,SAAU,CAACvD,KAAK,IAChB5D,KAAK,YACLoH,MAAO,CAAC,CAAEC,UAAU,EAAM1E,QAAS,2CAJvC,SAKI,cAAC,IAAD,CAAO2E,SAAU,SAACC,GAAD,OAAOlG,EAAMmG,IAAI,kBAAmBD,EAAEE,OAAOC,YAElE,cAAC,IAAKT,KAAN,UACI,cAAC,IAAD,CAAQxD,KAAK,UAAUkE,SAAS,SAAhC,mC,QC6DT1G,mBA7Ff,WACI,IAAIC,EAAUC,cAGRS,EAAc8G,cAAd9G,UAJe,EAMaN,oBAAS,GANtB,mBAMdC,EANc,KAMHC,EANG,OAOWF,oBAAS,GAPpB,mBAOdc,EAPc,KAOJuG,EAPI,KAcfC,EAAiB,WACnBpH,GAAa,GChBU,SAACI,GAAD,OAAeG,YAAU,GAAD,OAAInB,EAAIG,gBAAkB,CAChFiB,OAAQ,OACRC,KAAMzC,EAAS,CACdoC,UAAWA,MAEVM,KACFC,aAAU,SAAAC,GACT,OAAIA,EAASC,GAELD,EAASE,QAGhBC,MAAM,GAAD,OAAIH,EAASI,aACXC,YAAG,CAAEC,OAAO,EAAMC,QAAQ,SAAD,OAAWP,EAASQ,cAGtDC,aAAW,SAAAC,GAGV,OADAP,MAAM,GAAD,OAAIO,EAAIH,UACNF,YAAG,CAAEC,OAAO,EAAMC,QAASG,EAAIH,cDFhCkG,CAAgBjH,GAAWoB,UAAU,CACjCC,KAAM,SAAAC,GACmB,kBAAXA,EACNyF,EAAYzF,GAEPA,EAAOR,OACRiG,EAAYzF,IAIxBG,SAAU,WACN7B,GAAa,OAUzB,OALAuE,qBAAU,WACN6C,MACD,IAGArH,EAEK,sBAAKkH,UAAU,UAAf,UACI,cAACK,EAAA,EAAD,CAAiBpE,MAAO,CAACW,SAAS,MAClC,iDAKW,kBAAbjD,EAEF,sBAAKqG,UAAU,UAAf,UACI,6BAAKrG,IACL,oBAAImB,QAAS,kBAAM+B,OAAOC,SAASC,QAAQ,OAA3C,SAAkD,4CAM1D,qCACI,eAAC,IAAD,CAASlC,YAAY,OAArB,UACI,cAAC,IAAD,CAAQC,QAAS,WA/CzBrC,EAAQsC,KAAR,kBA+C2CC,KAAK,SAASC,KAAM,cAACC,EAAA,EAAD,IAAvD,gCADJ,wBAMA,eAAC,IAAD,WACI,cAAC,IAAD,CAAKC,KAAM,EAAX,SACI,cAAC,IAAD,CACIiB,QAAStD,EACTsC,WAAS,EACTC,MAAO,qBAAKC,IAAK3B,EAASpC,KAAMgE,IAAK5B,EAAS6B,QAHlD,SAKI,cAAC,IAAKC,KAAN,CAAWC,MAAO/B,EAASpC,KAAMoE,YAAahC,EAASgC,kBAG/D,eAAC,IAAD,CAAKC,OAAQ,EAAGT,KAAM,GAAtB,UACI,6BAAKxB,EAASkC,gBACd,6BAAKlC,EAASmC,iBACd,6BAAKnC,EAASoC,kBACd,mCAAMpC,EAASqC,SACf,sBAAKC,MAAO,CAACC,UAAU,UAAvB,UACI,cAAC,IAAD,CAASrB,YAAY,SAArB,oBACA,oBAAImF,UAAWrG,EAAS2G,gBAAxB,SAAsE,WAA5B3G,EAAS2G,gBAA+B,UAAY3G,EAAS2G,kBAEvE,WAA5B3G,EAAS2G,iBACT,6BAAI,mBAAGnE,KAAMxC,EAAS4G,YAAlB,gDEQjB/H,mBA5Ff,WACI,IAAIC,EAAUC,cADG,EAIiBG,oBAAS,GAJ1B,mBAIVC,EAJU,KAICC,EAJD,OAKiBF,mBAAS,IAL1B,mBAKV2H,EALU,KAKCC,EALD,KAYXC,EAAgB,WAClB3H,GAAa,GDUeO,YAAU,GAAD,OAAInB,EAAII,qBAAuB,CAC3EgB,OAAQ,OACRC,KAAMzC,EAAS,MACb0C,KACFC,aAAU,SAAAC,GACT,OAAIA,EAASC,GAELD,EAASE,QAGhBC,MAAM,GAAD,OAAIH,EAASI,aACXC,YAAG,CAAEC,OAAO,EAAMC,QAAQ,SAAD,OAAWP,EAASQ,cAGtDC,aAAW,SAAAC,GAGV,OADAP,MAAM,GAAD,OAAIO,EAAIH,UACNF,YAAG,CAAEC,OAAO,EAAMC,QAASG,EAAIH,cC1BfK,UAAU,CACvBC,KAAM,SAAAC,GACGA,EAAOR,QACRwG,EAAahG,GACbkG,QAAQC,IAAInG,KAGpBG,SAAU,WACN7B,GAAa,OASzB,OAJAuE,qBAAU,WACNoD,MACD,IAGC,qCACI,eAAC,IAAD,CAAS7F,YAAY,OAArB,UACI,cAAC,IAAD,CAAQC,QAAS,WAzBzBrC,EAAQsC,KAAR,kBAyB2CC,KAAK,SAASC,KAAM,cAACC,EAAA,EAAD,IAAvD,gCADJ,sBAMA,cAAC,IAAD,CACI2F,WAAW,WACXC,KAAK,QACLrB,KAAM,CAAEC,OAAQ,EAAGqB,GAAI,EAAGC,GAAI,GAC9B5E,QAAStD,EACTmI,WAAY,CACRpC,SAAU,SAAAqC,GACNP,QAAQC,IAAIM,IAEhBC,SAAU,GAEdvB,WAAYY,EACZX,WAAY,SAAA/B,GAAI,OACZ,eAAC,IAAKU,KAAN,CAEI4C,MACI,sBAAKpB,UAAU,MAAf,UACI,qBACIb,MAAO,IACP7D,IAAKwC,EAAKvG,KACVgE,IAAKuC,EAAKtC,QAEd,sBAAKwE,UAAU,UAAf,UACI,6BAAKlC,EAAKjC,gBACV,gCAAQiC,EAAKhC,iBACb,gCAAQgC,EAAK/B,kBACb,sBAAKE,MAAO,CAAEC,UAAW,UAAzB,UACI,cAAC,IAAD,CAASrB,YAAY,SAArB,oBACA,oBAAImF,UAAWlC,EAAKwC,gBAApB,SAAsCxC,EAAKwC,kBAEf,WAAxBxC,EAAKwC,iBACL,6BAAI,mBAAGnE,KAAM2B,EAAKyC,YAAd,0CAlB5B,UAyBI,cAAC,IAAK/B,KAAK/C,KAAX,CACIC,MAAO,4BAAIoC,EAAKvG,OAChBoE,YAAamC,EAAKnC,cAEtB,mCAAMmC,EAAK9B,SACX,cAAC,IAAD,CAASnB,YAAY,SAArB,8BAA6CiD,EAAK3E,eA7B7C2E,EAAKuD,a,QC5CnBC,EAdDC,IAAMC,MAAM,CACtB3F,cAAe0F,IAAME,SAASF,IAAMG,OAAQ,IAC5C5F,eAAgByF,IAAME,SAASF,IAAMG,OAAQ,IAC7C3F,gBAAiBwF,IAAME,SAASF,IAAMG,OAAQ,IAC9CC,WAAYJ,IAAME,SAASF,IAAMK,QAAS,GAC1CzI,UAAWoI,IAAME,SAASF,IAAMG,OAAQ,MACzCtC,SAAQ,SAAAyC,GAAI,MAAK,CAChB9C,IADgB,SACZ+C,EAAU7C,GACV4C,EAAKC,GAAY7C,OAErB8C,OAAM,SAAAF,GAAI,MAAK,MCuBJG,MA9Bf,WAEI,IAAIpJ,EAAQ0I,EAAMW,OAAO,IAEzB,OACI,eAAC,IAAD,WACI,qBAAKZ,GAAG,qBACR,eAAC,IAAD,WACI,cAAC,IAAD,CACIa,KAAK,iBACLC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAmBA,OAC1C,cAAC,IAAD,CACIF,KAAK,YACLC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAcA,OACrC,cAAC,IAAD,CACIF,KAAK,gBACLC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,aAAaxJ,MAAOA,GAAWwJ,OACtD,cAAC,IAAD,CACIF,KAAK,4BACLC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAmBA,OAC1C,cAAC,IAAD,CACIF,KAAK,cACLC,OAAQ,SAACC,GAAD,OAAW,cAAC,EAAD,eAAeA,OACtC,cAAC,IAAD,CAAUC,GAAG,yBClBdC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASb,OACP,cAAC,IAAMc,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7a74d09b.chunk.js","sourcesContent":["import _ from 'underscore'\r\n\r\n//function for create a object type FormData from a received object\r\n//example \r\n//{item1, item2} or {item1:'1', item2:'2'}\r\nexport function formData(formData){\r\n\tlet data = new FormData();\r\n\tif(!_.isEmpty(formData)){\r\n\t\tfor(let items in formData){\r\n\t\t\tdata.append(items, formData[items]);\r\n\t\t}\r\n\t}\r\n\treturn data;\r\n}\r\n\r\n//upload data to localstorage\r\nexport function upLocalStorage(name, data){\r\n\tdebugger;\r\n\tlocalStorage.setItem(name, JSON.stringify(data));\r\n}\r\n\r\n//get data to localstorage\r\nexport function getLocalStorage(name){\r\n\treturn JSON.parse(localStorage.getItem(name));\r\n}\r\n\r\n//remove data to localstorage\r\nexport function removeLocalStorage(name){\r\n\treturn localStorage.removeItem(name);\r\n}\r\n\r\n//remove all data to localstorage\r\nexport function removeAllLocalStorage(name){\r\n\treturn localStorage.clear();\r\n}","const urlApi = process.env.REACT_APP_URL_API\r\nexport const url = {\r\n    url_products_list: `${urlApi}/product/listProducts`,\r\n    url_pay: `${urlApi}/order/pay`,\r\n    url_get_status: `${urlApi}/order/getStatusOrder/`,\r\n    url_get_orders_list: `${urlApi}/order/getOrderList/`\r\n}","import React, { useState } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { Divider, Row, Col, Card, Button } from 'antd';\r\nimport { getLocalStorage } from '../../helpers/Utils'\r\nimport { ApiOutlined } from '@ant-design/icons';\r\nimport { payOrder$ } from '../../services/Pay.services';\r\nimport { CheckOutlined, AppstoreAddOutlined } from '@ant-design/icons';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction OrderSelected() {\r\n    let history = useHistory();\r\n\r\n    //get product of localstorage\r\n    const product = getLocalStorage('product');\r\n    const order = getLocalStorage('order');\r\n\r\n    //variables\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [urlPago, setUrlPago] = useState(null);\r\n    const [idSesion, setIdSesion] = useState(null);\r\n    const [reference, setReference] = useState(null);\r\n\r\n    //redirect for to order response\r\n    const sendForm = () => {\r\n        history.push(`/listProducts`);\r\n    }\r\n\r\n    //pay\r\n    const payOrder = () => {\r\n        setIsLoading(true);\r\n        payOrder$(order, product).subscribe({\r\n            next: result => {\r\n                if (!result.error) {\r\n                    setUrlPago(result.processUrl);\r\n                    setIdSesion(result.requestId);\r\n                    setReference(result.reference);\r\n                }\r\n            },\r\n            complete: () => {\r\n                setIsLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    //without data we show a icon only\r\n    if (!product || !order) {\r\n        return (\r\n            <div style={{ flex: 1, display: 'flex', alignContent: 'center', alignItems: 'center', flexDirection: 'column' }}>\r\n                <ApiOutlined style={{ fontSize: 120 }} />\r\n                <h1>Debes seleccionar un producto para hacer la orden</h1>\r\n                <a onClick={() => window.location.replace(\"/\")}>Volver</a>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <Divider orientation=\"left\">\r\n                <Button onClick={() => sendForm()} type=\"dashed\" icon={<AppstoreAddOutlined />}>\r\n                    Volver a productos\r\n                </Button>\r\n                Resumen de la orden\r\n            </Divider>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <Card\r\n                        hoverable\r\n                        cover={<img alt={product.name} src={product.image} />}\r\n                    >\r\n                        <Card.Meta title={product.name} description={product.description} />\r\n                    </Card>\r\n                </Col>\r\n                <Col offset={2} span={10} >\r\n                    <h1>{order.customer_name}</h1>\r\n                    <h2>{order.customer_email}</h2>\r\n                    <h3>{order.customer_mobile}</h3>\r\n                    <h2>${product.price}</h2>\r\n                    {\r\n                        !urlPago\r\n                        ?\r\n                        <Button loading={isLoading} onClick={() => payOrder()} type=\"primary\" icon={<CheckOutlined/>}>\r\n                            Continuar con el pago\r\n                        </Button>\r\n                        :\r\n                        <div style={{textAlign:'center'}}>\r\n                            <br/>\r\n                            <Divider orientation=\"center\">Referencia de pago {reference}</Divider>\r\n                            <h2><a href={urlPago}>Ingresar datos para el pago</a></h2>\r\n                        </div>\r\n                    }\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(OrderSelected);","import { fromFetch } from 'rxjs/fetch';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\nimport { of } from \"rxjs\";\r\nimport { formData } from '../helpers/Utils'\r\nimport { url } from './Url.js';\r\n//import { response, responseError } from './Message'\r\n\r\nexport const payOrder$ = (order, product) => fromFetch(`${url.url_pay}`, {\r\n\tmethod: 'POST',\r\n\tbody: formData({\r\n\t\torder: JSON.stringify(order),\r\n\t\tproduct: JSON.stringify(product),\r\n\t}) //data if you want send parameters\r\n}).pipe(\r\n\tswitchMap(response => {\r\n\t\tdebugger;\r\n\t\tif (response.ok) {\r\n\t\t\t// OK return data\r\n\t\t\treturn response.json();\r\n\t\t} else {\r\n\t\t\t// Server is returning a status requiring the client to try something else.\r\n\t\t\talert(`${response.statusText}`);\r\n\t\t\treturn of({ error: true, message: `Error ${response.status}` });\r\n\t\t}\r\n\t}),\r\n\tcatchError(err => {\r\n\t\tdebugger;\r\n\t\t// Network or other error, handle appropriately\r\n\t\talert(`${err.message}`);\r\n\t\treturn of({ error: true, message: err.message })\r\n\t})\r\n);","import React, { useState, useEffect } from 'react';\r\nimport { listProduct$ } from '../../services/Products.services';\r\nimport { Form, Input, List, Button, Divider, Card, Modal, Space } from 'antd';\r\nimport { DataUser } from '../'\r\nimport { AppstoreAddOutlined, BorderlessTableOutlined, BuildOutlined, DollarCircleOutlined, SendOutlined } from '@ant-design/icons';\r\nimport { observer } from \"mobx-react\";\r\nimport { upLocalStorage, removeLocalStorage, removeAllLocalStorage } from '../../helpers/Utils'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ListProduct({ order }) {\r\n    let history = useHistory();\r\n    \r\n    //variables\r\n    const [listProducts, setListProducts] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isModalVisible, setIsModalVisible] = useState(false);\r\n    const [isModalVisibleOrderResponse, setIsModalVisibleOrderResponse] = useState(false);\r\n\r\n    //clear localstorage\r\n    useEffect(() => {\r\n        removeAllLocalStorage();\r\n    }, [])\r\n\r\n    //redirect for to order response\r\n    const sendForm = () => {\r\n        history.push(`/orderResponse/${order.reference}`);\r\n    }\r\n\r\n    //fecth to server\r\n    const fecthList = () => {\r\n        setIsLoading(true);\r\n        listProduct$().subscribe({\r\n            next: result => {\r\n                if (!result.error) {\r\n                    setListProducts(result);\r\n                }\r\n            },\r\n            complete: () => {\r\n                setIsLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    //create icon of actions\r\n    const IconText = ({ icon, text, onClick }) => (\r\n        <Space onClick={onClick}>\r\n            {React.createElement(icon)}\r\n            {text}\r\n        </Space>\r\n    );\r\n\r\n    //open close modal and upload producto to localstorage\r\n    const openCloseModal = (item) => {\r\n        setIsModalVisible(!isModalVisible);\r\n        if (item) {\r\n            upLocalStorage('product', item);\r\n        }\r\n    }\r\n\r\n    //open close modal order response\r\n    const openCloseModalOrderResponse = (item) => {\r\n        setIsModalVisibleOrderResponse(!isModalVisibleOrderResponse);\r\n    }\r\n\r\n    //redirect to page order lista\r\n    const redirecToOrdersList = () => {\r\n        history.push('/listOrders');\r\n    }\r\n\r\n    //modal of form user for the data personal \r\n    const FormOrder = () => (\r\n        <>\r\n            <Modal\r\n                onCancel={() => openCloseModal()}\r\n                okButtonProps={{ style: { display: 'none' } }}\r\n                title=\"Para continuar completa los siguientes datos\"\r\n                visible={isModalVisible}\r\n                afterClose={() => removeLocalStorage('product')}\r\n                cancelText={'Cancelar'}>\r\n                <DataUser order={order} />\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n    //modal for orderResponde view \r\n    const FormOrderResponse = () => (\r\n        <>\r\n            <Modal\r\n                onCancel={() => openCloseModalOrderResponse()}\r\n                okButtonProps={{ style: { display: 'none' } }}\r\n                title=\"Para continuar completa los siguientes datos\"\r\n                visible={isModalVisibleOrderResponse}\r\n                afterClose={() => removeLocalStorage('product')}\r\n                cancelText={'Cancelar'}>\r\n\r\n                <div>\r\n                    <Form\r\n                        onFinish={() => sendForm()}>\r\n                        <Form.Item\r\n                            label=\"Referencia\"\r\n                            name=\"reference\"\r\n                            labelCol={{ span: 24 }}\r\n                            rules={[{ required: true, message: 'la referencia es necesaria' }]}>\r\n                            <Input onChange={(e) => order.set('reference', e.target.value)} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">\r\n                                Continuar\r\n                            </Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </Modal>\r\n        </>\r\n    )\r\n\r\n    //each item of the list\r\n    const Item = (item) => (\r\n        <List.Item>\r\n            <Card\r\n                style={{ width: 300 }}\r\n                cover={\r\n                    <img\r\n                        src={item.image}\r\n                    />\r\n                }\r\n                actions={[\r\n                    <IconText onClick={() => openCloseModal(item)} icon={SendOutlined} text=\"Ordenar\" key=\"list-vertical-star-o\" />,\r\n                    <IconText icon={DollarCircleOutlined} text={item.price} key=\"list-vertical-like-o\" />,\r\n                ]}\r\n            >\r\n                <Card.Meta\r\n                    title={item.name}\r\n                    description={item.description}\r\n                />\r\n            </Card>\r\n        </List.Item>\r\n    )\r\n\r\n    //main\r\n    return (\r\n        <>\r\n            <FormOrder />\r\n            <FormOrderResponse />\r\n            <Divider orientation=\"left\">\r\n                <Button loading={isLoading} onClick={() => fecthList()} type=\"dashed\" icon={<AppstoreAddOutlined />}>\r\n                    Ver productos\r\n                </Button>\r\n                <Button onClick={() => redirecToOrdersList()} type=\"dashed\" icon={<BorderlessTableOutlined />}>\r\n                    Ver ordenes\r\n                </Button>\r\n                <Button onClick={() => openCloseModalOrderResponse()} type=\"dashed\" icon={<BuildOutlined />}>\r\n                    Buscar mi orden\r\n                </Button>\r\n            </Divider>\r\n            <List\r\n                loading={isLoading}\r\n                grid={{ column: 4 }}\r\n                bordered\r\n                dataSource={listProducts}\r\n                renderItem={item => (\r\n                    <Item {...item} />\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default observer(ListProduct);","import { fromFetch } from 'rxjs/fetch';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\nimport { of } from \"rxjs\";\r\nimport { formData } from '../helpers/Utils'\r\nimport { url } from './Url.js';\r\n//import { response, responseError } from './Message'\r\n\r\n\r\nexport const listProduct$ = () => fromFetch(`${url.url_products_list}`, {\r\n\tmethod: 'POST',\r\n\tbody: formData({}), //data if you want send parameters\r\n}).pipe(\r\n\tswitchMap(response => {\r\n\t\tif (response.ok) {\r\n\t\t\t// OK return data\r\n\t\t\treturn response.json();\r\n\t\t} else {\r\n\t\t\t// Server is returning a status requiring the client to try something else.\r\n\t\t\talert(`${response.statusText}`);\r\n\t\t\treturn of({ error: true, message: `Error ${response.status}` });\r\n\t\t}\r\n\t}),\r\n\tcatchError(err => {\r\n\t\t// Network or other error, handle appropriately\r\n\t\talert(`${err.message}`);\r\n\t\treturn of({ error: true, message: err.message })\r\n\t})\r\n);","import React from 'react';\r\nimport { Form, Input, Button, Row, Col } from 'antd';\r\nimport { observer } from \"mobx-react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { upLocalStorage } from '../../helpers/Utils';\r\n\r\nfunction DataUser({order}) {\r\n    let history = useHistory();\r\n    const sendForm = () => {\r\n        upLocalStorage('order', order);\r\n        history.push('/orderSelected');\r\n    }\r\n\r\n    return (\r\n        <Row justify=\"center\" align=\"middle\">\r\n            <Col className=\"gutter-row\">\r\n                <Form\r\n                    onFinish={() => sendForm()}>\r\n                    <Form.Item\r\n                        label=\"Nombre\"\r\n                        labelCol={{span:24}}\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'El nombre es necesario' }]}>\r\n                        <Input onChange={(e) => order.set('customer_name', e.target.value)} />\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Correo electrónico\"\r\n                        labelCol={{span:24}}\r\n                        name=\"email\"\r\n                        rules={[{ required: true, message: 'El correo electronico es obligatorio' }]}>\r\n                        <Input onChange={(e) => order.set('customer_email', e.target.value)}/>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Número de celular\"\r\n                        labelCol={{span:24}}\r\n                        name=\"telephone\"\r\n                        rules={[{ required: true, message: 'El número de celular es obligatorio' }]}>\r\n                        <Input onChange={(e) => order.set('customer_mobile', e.target.value)}/>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Continuar\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default observer(DataUser);","import React, { useEffect, useState } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Divider, Row, Col, Card, Button } from 'antd';\r\nimport { getOrderStatus$ } from '../../services/Orders.services';\r\nimport { LoadingOutlined, AppstoreAddOutlined } from '@ant-design/icons';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction OrderResponse() {\r\n    let history = useHistory();\r\n\r\n    //get product of localstorage\r\n    let { reference } = useParams();\r\n    //variables\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [response, setResponse] = useState(false);\r\n\r\n    //redirect for to order response\r\n    const sendForm = () => {\r\n        history.push(`/listProducts`);\r\n    }\r\n\r\n    const getStatusOrder = () => {\r\n        setIsLoading(true);\r\n        getOrderStatus$(reference).subscribe({\r\n            next: result => {\r\n                if(typeof result === 'string'){\r\n                    setResponse(result);\r\n                }else{\r\n                    if (!result.error) {\r\n                        setResponse(result);\r\n                    }\r\n                }\r\n            },\r\n            complete: () => {\r\n                setIsLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getStatusOrder();\r\n    }, [])\r\n\r\n\r\n    if(isLoading){\r\n        return(\r\n            <div className='loading'>\r\n                <LoadingOutlined style={{fontSize:50}} />\r\n                <h2>Cargando....</h2>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(typeof response === 'string'){\r\n        return(\r\n            <div className='loading'>\r\n                <h2>{response}</h2>\r\n                <h2 onClick={() => window.location.replace(\"./\")}><a>Volver</a></h2>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Divider orientation=\"left\">\r\n                <Button onClick={() => sendForm()} type=\"dashed\" icon={<AppstoreAddOutlined />}>\r\n                    Volver a productos\r\n                </Button>\r\n                Estado de la orden\r\n            </Divider>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <Card\r\n                        loading={isLoading}\r\n                        hoverable\r\n                        cover={<img alt={response.name} src={response.image} />}\r\n                    >\r\n                        <Card.Meta title={response.name} description={response.description} />\r\n                    </Card>\r\n                </Col>\r\n                <Col offset={2} span={10} >\r\n                    <h1>{response.customer_name}</h1>\r\n                    <h2>{response.customer_email}</h2>\r\n                    <h3>{response.customer_mobile}</h3>\r\n                    <h2>${response.price}</h2>\r\n                    <div style={{textAlign:'center'}}>\r\n                        <Divider orientation=\"center\">Estado</Divider>\r\n                        <h1 className={response.customer_status}>{response.customer_status == 'CREATED' ? 'PENDING' : response.customer_status}</h1>\r\n                        {\r\n                            response.customer_status == 'CREATED' &&\r\n                            <h2><a href={response.process_url}>Finalizar el pago</a></h2>\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default observer(OrderResponse);","import { fromFetch } from 'rxjs/fetch';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\nimport { of } from \"rxjs\";\r\nimport { formData } from '../helpers/Utils'\r\nimport { url } from './Url.js';\r\n//import { response, responseError } from './Message'\r\n\r\nexport const getOrderStatus$ = (reference) => fromFetch(`${url.url_get_status}`, {\r\n\tmethod: 'POST',\r\n\tbody: formData({\r\n\t\treference: reference\r\n\t}) //data if you want send parameters\r\n}).pipe(\r\n\tswitchMap(response => {\r\n\t\tif (response.ok) {\r\n\t\t\t// OK return data\r\n\t\t\treturn response.json();\r\n\t\t} else {\r\n\t\t\t// Server is returning a status requiring the client to try something else.\r\n\t\t\talert(`${response.statusText}`);\r\n\t\t\treturn of({ error: true, message: `Error ${response.status}` });\r\n\t\t}\r\n\t}),\r\n\tcatchError(err => {\r\n\t\t// Network or other error, handle appropriately\r\n\t\talert(`${err.message}`);\r\n\t\treturn of({ error: true, message: err.message })\r\n\t})\r\n);\r\n\r\nexport const getOrdersList$ = () => fromFetch(`${url.url_get_orders_list}`, {\r\n\tmethod: 'POST',\r\n\tbody: formData({}) //data if you want send parameters\r\n}).pipe(\r\n\tswitchMap(response => {\r\n\t\tif (response.ok) {\r\n\t\t\t// OK return data\r\n\t\t\treturn response.json();\r\n\t\t} else {\r\n\t\t\t// Server is returning a status requiring the client to try something else.\r\n\t\t\talert(`${response.statusText}`);\r\n\t\t\treturn of({ error: true, message: `Error ${response.status}` });\r\n\t\t}\r\n\t}),\r\n\tcatchError(err => {\r\n\t\t// Network or other error, handle appropriately\r\n\t\talert(`${err.message}`);\r\n\t\treturn of({ error: true, message: err.message })\r\n\t})\r\n);","import React, { useEffect, useState } from 'react';\r\nimport { observer } from \"mobx-react\";\r\nimport { Divider, List, Space, Button } from 'antd';\r\nimport { getOrdersList$ } from '../../services/Orders.services';\r\nimport { AppstoreAddOutlined } from '@ant-design/icons';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction OrderList() {\r\n    let history = useHistory();\r\n\r\n    //variables\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [orderList, setOrderList] = useState([]);\r\n\r\n    //redirect for to products\r\n    const sendForm = () => {\r\n        history.push(`/listProducts`);\r\n    }\r\n\r\n    const getListOrders = () => {\r\n        setIsLoading(true);\r\n        getOrdersList$().subscribe({\r\n            next: result => {\r\n                if (!result.error) {\r\n                    setOrderList(result);\r\n                    console.log(result);\r\n                }\r\n            },\r\n            complete: () => {\r\n                setIsLoading(false);\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getListOrders();\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <Divider orientation=\"left\">\r\n                <Button onClick={() => sendForm()} type=\"dashed\" icon={<AppstoreAddOutlined />}>\r\n                    Volver a productos\r\n                </Button>\r\n                Lista de ordenes\r\n            </Divider>\r\n            <List\r\n                itemLayout=\"vertical\"\r\n                size=\"large\"\r\n                grid={{ column: 3, xs: 1, sm: 1 }}\r\n                loading={isLoading}\r\n                pagination={{\r\n                    onChange: page => {\r\n                        console.log(page);\r\n                    },\r\n                    pageSize: 6,\r\n                }}\r\n                dataSource={orderList}\r\n                renderItem={item => (\r\n                    <List.Item\r\n                        key={item.id}\r\n                        extra={\r\n                            <div className='det'>\r\n                                <img\r\n                                    width={120}\r\n                                    alt={item.name}\r\n                                    src={item.image}\r\n                                />\r\n                                <div className='detText'>\r\n                                    <h3>{item.customer_name}</h3>\r\n                                    <label>{item.customer_email}</label>\r\n                                    <label>{item.customer_mobile}</label>\r\n                                    <div style={{ textAlign: 'center' }}>\r\n                                        <Divider orientation=\"center\">Estado</Divider>\r\n                                        <h2 className={item.customer_status}>{item.customer_status}</h2>\r\n                                        {\r\n                                            item.customer_status == 'CREATED' &&\r\n                                            <h3><a href={item.process_url}>Finalizar el pago</a></h3>\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    >\r\n                        <List.Item.Meta\r\n                            title={<a>{item.name}</a>}\r\n                            description={item.description}\r\n                        />\r\n                        <h3>${item.price}</h3>\r\n                        <Divider orientation='center'>{`REFRENCIA: ${item.reference}`}</Divider>\r\n\r\n                    </List.Item>\r\n                )}\r\n            />\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default observer(OrderList);","import { types } from 'mobx-state-tree';\n\nconst Order = types.model({\n    customer_name: types.optional(types.string, ''),\n    customer_email: types.optional(types.string, ''),\n    customer_mobile: types.optional(types.string, ''),\n    id_product: types.optional(types.integer, 0),\n    reference: types.optional(types.string, ''),\n}).actions(self => ({\n    set(property, value) {\n        self[property] = value\n    }\n})).views(self => ({\n\n}))\n\nexport default Order;","import React from 'react';\r\nimport { BrowserRouter, Route, Redirect, Switch } from \"react-router-dom\";\r\nimport { ListProduct, OrderSelected, DataUser, OrderResponse, OrderList } from '../views'\r\nimport Order from \"../models/Order\";\r\n\r\nfunction RouterComponent() {\r\n    //user mobx for the administration of state\r\n    let order = Order.create({});\r\n   \r\n    return (\r\n        <BrowserRouter>\r\n            <div id=\"container-notify\"></div>\r\n            <Switch>\r\n                <Route\r\n                    path=\"/orderSelected\"\r\n                    render={(props) => <OrderSelected {...props} />} />\r\n                <Route\r\n                    path=\"/dataUser\"\r\n                    render={(props) => <DataUser {...props} />} />\r\n                <Route\r\n                    path=\"/listProducts\"\r\n                    render={(props) => <ListProduct order={order} {...props} />} />\r\n                <Route\r\n                    path=\"/orderResponse/:reference\"\r\n                    render={(props) => <OrderResponse {...props} />} />\r\n                <Route\r\n                    path=\"/listOrders\"\r\n                    render={(props) => <OrderList {...props} />} />\r\n                <Redirect to=\"/listProducts\" />\r\n            </Switch>\r\n        </BrowserRouter>\r\n\r\n    )\r\n}\r\n\r\nexport default RouterComponent;","import './App.css';\nimport 'antd/dist/antd.css';\nimport RouterComponent from './routes/RouterComponent'\n\nfunction App() {\n  return (\n    <RouterComponent/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}